// Rendering functions for different components
import { generateStars, showModal } from './ui.js';

// Genre translations
const genreTranslations = {
    'puzzle': '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞',
    'adventure': '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', 
    'simulator': '–°–∏–º—É–ª—è—Ç–æ—Ä',
    'horror': '–•–æ—Ä—Ä–æ—Ä',
    'coop': '–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤',
    'shooter': '–®—É—Ç–µ—Ä',
    'platformer': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä',
    'rpg': 'RPG',
    'animation': '–ê–Ω–∏–º–∞—Ü–∏—è',
    'fantasy': '–§—ç–Ω—Ç–µ–∑–∏',
    'crossover': '–ö—Ä–æ—Å—Å–æ–≤–µ—Ä',
    'family': '–°–µ–º–µ–π–Ω—ã–π'
};

// Render schedule
export function renderSchedule(scheduleData) {
    const scheduleList = document.getElementById('schedule-list');
    if (!scheduleList) {
        console.error('‚ùå Schedule list container not found');
        return;
    }
    
    scheduleList.innerHTML = '';
    
    if (!scheduleData || scheduleData.length === 0) {
        scheduleList.innerHTML = `
            <div class="schedule-item">
                <div class="schedule-content">
                    <div class="schedule-game">üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</div>
                    <div class="schedule-desc">–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–∫–æ—Ä–æ</div>
                </div>
            </div>
        `;
        return;
    }
    
    try {
        scheduleData.forEach(item => {
            const scheduleItem = document.createElement('div');
            scheduleItem.className = 'schedule-item';
            if (item.highlighted) {
                scheduleItem.classList.add('highlighted');
            }
            
            scheduleItem.innerHTML = `
                <div class="schedule-day-wrapper">
                    <div class="schedule-day">${item.day || '–î–µ–Ω—å'}</div>
                    <div class="schedule-time">${item.time || '–í—Ä–µ–º—è'}</div>
                </div>
                <div class="schedule-content">
                    <div class="schedule-game">${item.game || '–ò–≥—Ä–∞'}</div>
                    <div class="schedule-desc">${item.description || '–û–ø–∏—Å–∞–Ω–∏–µ'}</div>
                </div>
                <div class="schedule-status"></div>
            `;
            
            scheduleList.appendChild(scheduleItem);
        });
        
        highlightCurrentDay();
        console.log('‚úÖ Schedule rendered successfully');
        
    } catch (error) {
        console.error('‚ùå Error rendering schedule:', error);
        scheduleList.innerHTML = `
            <div class="schedule-item">
                <div class="schedule-content">
                    <div class="schedule-game">‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</div>
                    <div class="schedule-desc">${error.message}</div>
                </div>
            </div>
        `;
    }
}

// Render game/movie cards
export function renderCards(container, data, type) {
    if (!container) {
        console.error(`‚ùå ${type} container not found`);
        return;
    }
    
    container.innerHTML = '';
    
    if (!data || data.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                ${type === 'game' ? 'üéÆ –ò–≥—Ä –ø–æ–∫–∞ –Ω–µ—Ç' : 'üé¨ –§–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'}
            </div>
        `;
        return;
    }
    
    try {
        data.forEach(item => {
            const card = createCard(item, type);
            if (card) {
                container.appendChild(card);
            }
        });
        
        attachCardListeners(type, data);
        console.log(`‚úÖ ${type === 'game' ? 'Games' : 'Movies'} rendered: ${data.length} items`);
        
    } catch (error) {
        console.error(`‚ùå Error rendering ${type}:`, error);
        container.innerHTML = `
            <div class="empty-state">
                ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ${type === 'game' ? '–∏–≥—Ä' : '—Ñ–∏–ª—å–º–æ–≤'}
                <br><small>${error.message}</small>
            </div>
        `;
    }
}

// Create individual card
function createCard(item, type) {
    try {
        const card = document.createElement('div');
        card.className = 'game-card';
        card.setAttribute(`data-${type}`, item.id);
        
        // Set status class
        if (type === 'game') {
            card.classList.add(item.status);
        } else {
            if (item.status === 'watched') card.classList.add('watched');
            else if (item.status === 'watching') card.classList.add('watching');
            else card.classList.add(item.status);
        }
        
        // Set custom hover color
        if (item.customColor) {
            card.style.setProperty('--custom-hover-color', item.customColor);
        }
        
        const imageHtml = `<div class="game-image-container"><img src="${item.image}" alt="${item.title}" class="game-image" loading="lazy" onerror="this.src='https://via.placeholder.com/300x400/0f0f1b/39ff14?text=No+Image'"></div>`;
        const starsHtml = generateStars(item.rating);
        const genresHtml = renderGenres(item.genres);
        
        card.innerHTML = `
            ${imageHtml}
            <div class="game-info">
                <h3 class="game-title">${item.title}</h3>
                <div class="game-genres">${genresHtml}</div>
                <div class="game-rating">${starsHtml}<span>${item.rating}/5</span></div>
                <p class="game-description">${item.description}</p>
            </div>
        `;
        
        return card;
    } catch (error) {
        console.error('‚ùå Error creating card:', error, item);
        return null;
    }
}

// Render genres as tags
function renderGenres(genres) {
    if (!genres || !Array.isArray(genres)) return '';
    
    return genres.map(genre => 
        `<span class="game-genre">${genreTranslations[genre] || genre}</span>`
    ).join('');
}

// Attach event listeners to cards
function attachCardListeners(type, data) {
    const cards = document.querySelectorAll(`[data-${type}]`);
    cards.forEach(card => {
        card.addEventListener('click', () => {
            const itemId = card.getAttribute(`data-${type}`);
            const item = data.find(i => i.id === itemId);
            if (item) showModal(item);
        });
        
        const image = card.querySelector('.game-image');
        if (image) {
            card.addEventListener('mouseenter', () => {
                image.style.transform = 'scale(1.05)';
            });
            
            card.addEventListener('mouseleave', () => {
                image.style.transform = 'scale(1)';
            });
        }
    });
}

// Highlight current day in schedule
function highlightCurrentDay() {
    const days = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞'];
    const today = new Date().getDay();
    
    const scheduleItems = document.querySelectorAll('.schedule-item');
    scheduleItems.forEach(item => {
        const status = item.querySelector('.schedule-status');
        if (status) {
            status.classList.remove('active');
        }
    });
    
    // Don't highlight weekends
    if (today === 0 || today === 6) return;
    
    const scheduleIndex = today - 1;
    if (scheduleIndex < scheduleItems.length) {
        const currentStatus = scheduleItems[scheduleIndex].querySelector('.schedule-status');
        if (currentStatus) {
            currentStatus.classList.add('active');
        }
    }
}

// Toggle games grid expansion
export function initGridToggle() {
    const toggleGamesBtn = document.getElementById('toggle-games');
    let isExpanded = false;

    if (toggleGamesBtn) {
        toggleGamesBtn.addEventListener('click', () => {
            isExpanded = !isExpanded;
            const activeContent = document.querySelector('.games-content.active');
            if (activeContent) {
                const activeGrid = activeContent.querySelector('.games-grid');
                
                if (isExpanded) {
                    activeGrid.style.maxHeight = 'none';
                    activeGrid.style.webkitMaskImage = 'none';
                    activeGrid.style.maskImage = 'none';
                    toggleGamesBtn.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';
                } else {
                    activeGrid.style.maxHeight = '800px';
                    activeGrid.style.webkitMaskImage = 'linear-gradient(to bottom, black 85%, transparent 98%)';
                    activeGrid.style.maskImage = 'linear-gradient(to bottom, black 85%, transparent 98%)';
                    toggleGamesBtn.textContent = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å';
                    
                    document.getElementById('games').scrollIntoView({ behavior: 'smooth' });
                }
            }
        });
    }
}
