// ==================== –ú–û–î–£–õ–¨ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ====================
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤

const DataLoader = {
    // –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cache: {
        games: null,
        movies: null,
        schedule: null,
        stats: null,
        lastUpdated: {}
    },

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    config: {
        cacheTimeout: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
        retryAttempts: 3,
        retryDelay: 1000,
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥
    },

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    state: {
        isLoading: false,
        pendingRequests: new Set(),
        activeRetries: {}
    }
};

// ==================== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ó–ê–ì–†–£–ó–ö–ò ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
DataLoader.loadGames = async function() {
    return this.loadData('games', 'data/games.json');
};

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
DataLoader.loadMovies = async function() {
    return this.loadData('movies', 'data/movies.json');
};

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
DataLoader.loadSchedule = async function() {
    return this.loadData('schedule', 'data/schedule.json');
};

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
DataLoader.loadStats = async function() {
    return this.loadData('stats', 'data/stats.json');
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
DataLoader.loadData = async function(dataType, url) {
    const cacheKey = dataType;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.isCacheValid(cacheKey)) {
        console.log(`üìÄ [${dataType}] –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞`);
        return this.cache[cacheKey];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
    if (this.state.pendingRequests.has(cacheKey)) {
        console.log(`‚è≥ [${dataType}] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞`);
        return await this.waitForPendingRequest(cacheKey);
    }

    try {
        this.state.pendingRequests.add(cacheKey);
        this.state.isLoading = true;

        console.log(`üì• [${dataType}] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...`);
        
        const data = await this.fetchWithRetry(url, dataType);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        this.cache[cacheKey] = data;
        this.cache.lastUpdated[cacheKey] = Date.now();
        
        console.log(`‚úÖ [${dataType}] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:`, this.getDataStats(data));
        
        return data;
        
    } catch (error) {
        console.error(`‚ùå [${dataType}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:`, error.message);
        
        // –ü—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏
        if (this.cache[cacheKey]) {
            console.warn(`üîÑ [${dataType}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞`);
            return this.cache[cacheKey];
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
        return this.getFallbackData(dataType);
        
    } finally {
        this.state.pendingRequests.delete(cacheKey);
        this.state.isLoading = this.state.pendingRequests.size > 0;
    }
};

// ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–≠–®–ï–ú ====================

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
 */
DataLoader.isCacheValid = function(cacheKey) {
    if (!this.cache[cacheKey]) return false;
    
    const lastUpdated = this.cache.lastUpdated[cacheKey];
    if (!lastUpdated) return false;
    
    const cacheAge = Date.now() - lastUpdated;
    return cacheAge < this.config.cacheTimeout;
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
 */
DataLoader.clearCache = function(dataType = null) {
    if (dataType) {
        this.cache[dataType] = null;
        this.cache.lastUpdated[dataType] = null;
        console.log(`üßπ –ö—ç—à [${dataType}] –æ—á–∏—â–µ–Ω`);
    } else {
        this.cache = {
            games: null,
            movies: null,
            schedule: null,
            stats: null,
            lastUpdated: {}
        };
        console.log('üßπ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω');
    }
};

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à)
 */
DataLoader.forceReload = async function(dataType) {
    this.clearCache(dataType);
    return await this.loadData(dataType, this.getUrlForDataType(dataType));
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
 */
DataLoader.getCacheStats = function() {
    const stats = {};
    const now = Date.now();
    
    Object.keys(this.cache.lastUpdated).forEach(key => {
        if (this.cache[key]) {
            const age = now - this.cache.lastUpdated[key];
            stats[key] = {
                hasData: true,
                age: Math.round(age / 1000),
                isValid: age < this.config.cacheTimeout,
                size: this.getDataSize(this.cache[key])
            };
        }
    });
    
    return stats;
};

// ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ï–¢–¨–Æ ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
DataLoader.fetchWithRetry = async function(url, dataType, attempt = 1) {
    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);
        
        const response = await fetch(url + '?t=' + Date.now(), {
            signal: controller.signal,
            headers: {
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache'
            }
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.validateData(data, dataType);
        
        return data;
        
    } catch (error) {
        if (attempt >= this.config.retryAttempts) {
            throw error;
        }
        
        console.warn(`üîÑ [${dataType}] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.retryAttempts}: ${error.message}`);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        const delay = this.config.retryDelay * attempt;
        await this.delay(delay);
        
        return this.fetchWithRetry(url, dataType, attempt + 1);
    }
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
DataLoader.validateData = function(data, dataType) {
    switch (dataType) {
        case 'games':
        case 'movies':
            if (!Array.isArray(data)) {
                throw new Error(`–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ –¥–ª—è ${dataType}`);
            }
            break;
            
        case 'schedule':
            if (!data || typeof data !== 'object') {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
            }
            if (data.schedule && !Array.isArray(data.schedule)) {
                throw new Error('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
            }
            break;
            
        case 'stats':
            if (!data || typeof data !== 'object') {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }
            break;
    }
};

/**
 * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è pending –∑–∞–ø—Ä–æ—Å–∞
 */
DataLoader.waitForPendingRequest = function(cacheKey) {
    return new Promise((resolve, reject) => {
        const checkInterval = setInterval(() => {
            if (!this.state.pendingRequests.has(cacheKey)) {
                clearInterval(checkInterval);
                
                if (this.cache[cacheKey]) {
                    resolve(this.cache[cacheKey]);
                } else {
                    reject(new Error(`–ó–∞–ø—Ä–æ—Å –¥–ª—è ${cacheKey} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ`));
                }
            }
        }, 100);
        
        // –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        setTimeout(() => {
            clearInterval(checkInterval);
            reject(new Error(`–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${cacheKey}`));
        }, this.config.timeout);
    });
};

// ==================== –†–ï–ó–ï–†–í–ù–´–ï –î–ê–ù–ù–´–ï ====================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
DataLoader.getFallbackData = function(dataType) {
    console.warn(`üõü [${dataType}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
    
    switch (dataType) {
        case 'games':
            return this.getFallbackGames();
            
        case 'movies':
            return this.getFallbackMovies();
            
        case 'schedule':
            return this.getFallbackSchedule();
            
        case 'stats':
            return this.getFallbackStats();
            
        default:
            return null;
    }
};

/**
 * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä
 */
DataLoader.getFallbackGames = function() {
    return [
        {
            id: 'fallback-portal',
            title: 'Portal 2',
            rating: 5,
            description: '–ö—É–ª—å—Ç–æ–≤–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ –æ—Ç Valve. –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...',
            image: 'https://cdn2.steamgriddb.com/grid/24be7c4485d63a3d70e038692172adce.png',
            genres: ['puzzle', 'adventure'],
            status: 'completed',
            videoId: 'dQw4w9WgXcQ',
            customColor: '#39ff14'
        }
    ];
};

/**
 * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
 */
DataLoader.getFallbackMovies = function() {
    return [
        {
            id: 'fallback-arcane',
            title: 'Arcane',
            rating: 5,
            description: '–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª –ø–æ League of Legends. –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...',
            image: 'https://images-s.kinorium.com/movie/poster/2754301/w1500_50222111.jpg',
            genres: ['animation', 'fantasy'],
            status: 'watched',
            videoId: 'dQw4w9WgXcQ',
            customColor: '#39ff14'
        }
    ];
};

/**
 * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
DataLoader.getFallbackSchedule = function() {
    return {
        schedule: [
            {
                day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                time: '16:00 - 19:00+',
                game: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...',
                description: '–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
                highlighted: false
            }
        ]
    };
};

/**
 * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
DataLoader.getFallbackStats = function() {
    return {
        followers: 5200,
        streams: 150,
        hours: 250,
        years: 3
    };
};

// ==================== –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´ ====================

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
DataLoader.delay = function(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
 */
DataLoader.getUrlForDataType = function(dataType) {
    const urls = {
        games: 'data/games.json',
        movies: 'data/movies.json',
        schedule: 'data/schedule.json',
        stats: 'data/stats.json'
    };
    
    return urls[dataType];
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
DataLoader.getDataStats = function(data) {
    if (Array.isArray(data)) {
        return `—ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${data.length}`;
    } else if (data && typeof data === 'object') {
        if (data.schedule && Array.isArray(data.schedule)) {
            return `–¥–Ω–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: ${data.schedule.length}`;
        }
        return `–ø–æ–ª–µ–π: ${Object.keys(data).length}`;
    }
    return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ KB
 */
DataLoader.getDataSize = function(data) {
    try {
        const jsonString = JSON.stringify(data);
        return Math.round((new Blob([jsonString]).size) / 1024 * 100) / 100;
    } catch {
        return 0;
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
 */
DataLoader.isOnline = function() {
    return navigator.onLine;
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
 */
DataLoader.setupNetworkListeners = function() {
    window.addEventListener('online', () => {
        console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.clearCache(); // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏
    });
    
    window.addEventListener('offline', () => {
        console.warn('üì¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    });
};

// ==================== –ü–ê–ö–ï–¢–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
 */
DataLoader.loadAllData = async function() {
    console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        const [games, movies, schedule, stats] = await Promise.allSettled([
            this.loadGames(),
            this.loadMovies(),
            this.loadSchedule(),
            this.loadStats()
        ]);
        
        const results = {
            games: games.status === 'fulfilled' ? games.value : this.getFallbackGames(),
            movies: movies.status === 'fulfilled' ? movies.value : this.getFallbackMovies(),
            schedule: schedule.status === 'fulfilled' ? schedule.value : this.getFallbackSchedule(),
            stats: stats.status === 'fulfilled' ? stats.value : this.getFallbackStats(),
            errors: {
                games: games.status === 'rejected' ? games.reason : null,
                movies: movies.status === 'rejected' ? movies.reason : null,
                schedule: schedule.status === 'rejected' ? schedule.reason : null,
                stats: stats.status === 'rejected' ? stats.reason : null
            }
        };
        
        console.log('üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
            games: results.games.length,
            movies: results.movies.length,
            schedule: results.schedule.schedule?.length || 0,
            hasErrors: Object.values(results.errors).some(error => error !== null)
        });
        
        return results;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        throw error;
    }
};

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
DataLoader.init = function() {
    this.setupNetworkListeners();
    console.log('‚úÖ –ú–æ–¥—É–ª—å DataLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (this.isOnline()) {
        setTimeout(() => {
            this.loadAllData().catch(error => {
                console.warn('‚ö†Ô∏è –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å:', error.message);
            });
        }, 1000);
    }
};

// ==================== –≠–ö–°–ü–û–†–¢ ====================

// –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥—É–ª—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DataLoader;
} else {
    // –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    window.DataLoader = DataLoader;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => DataLoader.init());
} else {
    DataLoader.init();
}

console.log('üì• –ú–æ–¥—É–ª—å DataLoader –∑–∞–≥—Ä—É–∂–µ–Ω');
