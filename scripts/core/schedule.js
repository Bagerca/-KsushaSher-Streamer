// ==================== –ú–û–î–£–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú ====================
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ç—Ä–∏–º–æ–≤

const ScheduleManager = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    state: {
        schedule: [],
        currentDayIndex: -1,
        lastUpdate: null,
        isLoading: false
    },

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config: {
        updateInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
        daysOrder: ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'],
        currentTimeZone: 'Europe/Moscow',
        highlightCurrentDay: true
    },

    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    elements: {},

    // –ö—ç—à
    cache: {
    }
};

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.init = function() {
    this.initializeElements();
    this.setupEventListeners();
    this.loadSchedule();
    this.startAutoUpdate();
    
    console.log('‚úÖ ScheduleManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
ScheduleManager.initializeElements = function() {
    this.elements = {
        scheduleList: document.getElementById('schedule-list'),
        scheduleSection: document.getElementById('schedule'),
        currentDayIndicator: document.querySelector('.current-day-indicator')
    };
};

// ==================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.loadSchedule = async function() {
    if (this.state.isLoading) return;
    
    this.state.isLoading = true;
    
    try {
        console.log('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ DataLoader –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.DataLoader) {
            const scheduleData = await DataLoader.loadSchedule();
            this.processScheduleData(scheduleData);
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            await this.loadScheduleFallback();
        }
        
        this.state.lastUpdate = new Date();
        this.state.isLoading = false;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        this.showErrorState();
        this.state.isLoading = false;
    }
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.processScheduleData = function(scheduleData) {
    if (!scheduleData || !scheduleData.schedule) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Ä—è–¥–∫—É –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    const sortedSchedule = this.sortScheduleByDays(scheduleData.schedule);
    
    this.state.schedule = sortedSchedule;
    this.state.currentDayIndex = this.getCurrentDayIndex();
    
    this.renderSchedule();
    this.highlightCurrentDay();
    
    console.log(`üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${sortedSchedule.length} –¥–Ω–µ–π`);
};

/**
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
 */
ScheduleManager.sortScheduleByDays = function(schedule) {
    return schedule.sort((a, b) => {
        const indexA = this.config.daysOrder.indexOf(a.day);
        const indexB = this.config.daysOrder.indexOf(b.day);
        
        if (indexA === -1) return 1;
        if (indexB === -1) return -1;
        
        return indexA - indexB;
    });
};

/**
 * –†–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.loadScheduleFallback = async function() {
    try {
        const response = await fetch('data/schedule.json?' + new Date().getTime());
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const scheduleData = await response.json();
        this.processScheduleData(scheduleData);
        
    } catch (error) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        this.useDemoSchedule();
    }
};

/**
 * –î–µ–º–æ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */
ScheduleManager.useDemoSchedule = function() {
    console.warn('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
    
    const demoSchedule = {
        schedule: [
            {
                day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                time: '16:00 - 19:00+',
                game: 'Mouthwashing',
                description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä –º–æ–π–∫–∏ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º',
                highlighted: false
            },
            {
                day: '–í—Ç–æ—Ä–Ω–∏–∫',
                time: '16:00 - 19:00+',
                game: 'Portal 2',
                description: '–ö—É–ª—å—Ç–æ–≤–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ –æ—Ç Valve',
                highlighted: false
            },
            {
                day: '–°—Ä–µ–¥–∞',
                time: '16:00 - 19:00+', 
                game: '–ß–∏–∫–∞—Ç–∏–ª–æ',
                description: '–õ–∞–±—É–±—É',
                highlighted: true
            },
            {
                day: '–ß–µ—Ç–≤–µ—Ä–≥',
                time: '16:00 - 19:00+',
                game: '–¢–µ—Å—Ç 5',
                description: 'RPG –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–∏—Ä–µ',
                highlighted: false
            },
            {
                day: '–ü—è—Ç–Ω–∏—Ü–∞',
                time: '16:00 - 19:00+',
                game: '–°–≤–æ–±–æ–¥–Ω—ã–π —Å—Ç—Ä–∏–º',
                description: '–í—ã–±–æ—Ä –∏–≥—Ä—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é –∫–æ–º—å—é–Ω–∏—Ç–∏',
                highlighted: true
            }
        ]
    };
    
    this.processScheduleData(demoSchedule);
};

// ==================== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø ====================

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.renderSchedule = function() {
    if (!this.elements.scheduleList) return;
    
    if (this.state.schedule.length === 0) {
        this.showEmptyState();
        return;
    }
    
    const scheduleHTML = this.state.schedule.map((day, index) => 
        this.createScheduleItemHTML(day, index)
    ).join('');
    
    this.elements.scheduleList.innerHTML = scheduleHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.attachScheduleEventHandlers();
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.createScheduleItemHTML = function(day, index) {
    const isCurrentDay = index === this.state.currentDayIndex;
    const isHighlighted = day.highlighted || false;
    const isWeekend = this.isWeekend(day.day);
    
    const classes = [
        'schedule-item',
        isCurrentDay ? 'current-day' : '',
        isHighlighted ? 'highlighted' : '',
        isWeekend ? 'weekend' : ''
    ].filter(Boolean).join(' ');
    
    return `
        <div class="${classes}" data-day-index="${index}">
            <div class="schedule-day-wrapper">
                <div class="schedule-day">
                    ${day.day}
                    ${isCurrentDay ? '<span class="live-indicator">üî¥ LIVE</span>' : ''}
                </div>
                <div class="schedule-time">${day.time}</div>
            </div>
            <div class="schedule-content">
                <div class="schedule-game">${day.game}</div>
                <div class="schedule-desc">${day.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</div>
            </div>
            <div class="schedule-status ${isCurrentDay ? 'active' : ''}">
                ${this.getStatusIcon(day, isCurrentDay)}
            </div>
            ${this.createScheduleBadges(day)}
        </div>
    `;
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–π–¥–∂–µ–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.createScheduleBadges = function(day) {
    const badges = [];
    
    if (day.highlighted) {
        badges.push('<span class="schedule-badge highlight">‚ú® –û—Å–æ–±—ã–π –¥–µ–Ω—å</span>');
    }
    
    if (this.isUpcomingStream(day)) {
        badges.push('<span class="schedule-badge upcoming">üïì –°–∫–æ—Ä–æ</span>');
    }
    
    if (badges.length > 0) {
        return `<div class="schedule-badges">${badges.join('')}</div>`;
    }
    
    return '';
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
 */
ScheduleManager.getStatusIcon = function(day, isCurrentDay) {
    if (isCurrentDay) {
        return '<i class="fas fa-broadcast-tower"></i>';
    }
    
    if (this.isStreamLive(day)) {
        return '<i class="fas fa-circle live-pulse"></i>';
    }
    
    return '<i class="far fa-clock"></i>';
};

// ==================== –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–ù–ï–ô ====================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
 */
ScheduleManager.getCurrentDayIndex = function() {
    const today = new Date();
    const currentDayName = this.getCurrentDayName();
    
    return this.state.schedule.findIndex(day => 
        day.day.toLowerCase() === currentDayName.toLowerCase()
    );
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
 */
ScheduleManager.getCurrentDayName = function() {
    const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    const today = new Date().getDay();
    return days[today];
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å –≤—ã—Ö–æ–¥–Ω—ã–º
 */
ScheduleManager.isWeekend = function(dayName) {
    const weekendDays = ['–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
    return weekendDays.includes(dayName);
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å —Å—Ç—Ä–∏–º
 */
ScheduleManager.isStreamLive = function(day) {
    if (!this.isCurrentDay(day.day)) return false;
    
    const streamTime = this.parseStreamTime(day.time);
    if (!streamTime) return false;
    
    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    
    return currentTime >= streamTime.start && currentTime <= streamTime.end;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∏–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º
 */
ScheduleManager.isUpcomingStream = function(day) {
    if (!this.isCurrentDay(day.day)) return false;
    
    const streamTime = this.parseStreamTime(day.time);
    if (!streamTime) return false;
    
    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    
    return currentTime < streamTime.start;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ç–µ–∫—É—â–∏–º
 */
ScheduleManager.isCurrentDay = function(dayName) {
    return dayName.toLowerCase() === this.getCurrentDayName().toLowerCase();
};

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç—Ä–∏–º–∞
 */
ScheduleManager.parseStreamTime = function(timeString) {
    // –§–æ—Ä–º–∞—Ç: "16:00 - 19:00+"
    const match = timeString.match(/(\d{1,2}):(\d{2})\s*-\s*(\d{1,2}):(\d{2})/);
    
    if (!match) return null;
    
    const startHours = parseInt(match[1]);
    const startMinutes = parseInt(match[2]);
    const endHours = parseInt(match[3]);
    const endMinutes = parseInt(match[4]);
    
    return {
        start: startHours * 60 + startMinutes,
        end: endHours * 60 + endMinutes,
        duration: (endHours - startHours) * 60 + (endMinutes - startMinutes)
    };
};

// ==================== –í–ò–ó–£–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ ====================

/**
 * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
 */
ScheduleManager.highlightCurrentDay = function() {
    if (!this.config.highlightCurrentDay) return;
    
    const currentItems = document.querySelectorAll('.schedule-item.current-day');
    
    currentItems.forEach(item => {
        item.classList.add('pulse-glow');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        const statusElement = item.querySelector('.schedule-status');
        if (statusElement) {
            statusElement.classList.add('status-pulse');
        }
    });
};

/**
 * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
 */
ScheduleManager.showLoadingState = function() {
    if (!this.elements.scheduleList) return;
    
    this.elements.scheduleList.innerHTML = `
        <div class="schedule-loading">
            <div class="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...</p>
        </div>
    `;
};

/**
 * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
 */
ScheduleManager.showErrorState = function() {
    if (!this.elements.scheduleList) return;
    
    this.elements.scheduleList.innerHTML = `
        <div class="schedule-error">
            <i class="fas fa-exclamation-triangle"></i>
            <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</p>
            <button class="retry-button">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
    const retryButton = this.elements.scheduleList.querySelector('.retry-button');
    if (retryButton) {
        retryButton.addEventListener('click', () => this.loadSchedule());
    }
};

/**
 * –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
ScheduleManager.showEmptyState = function() {
    if (!this.elements.scheduleList) return;
    
    this.elements.scheduleList.innerHTML = `
        <div class="schedule-empty">
            <i class="fas fa-calendar-plus"></i>
            <p>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</p>
            <small>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ Telegram –∫–∞–Ω–∞–ª–µ</small>
        </div>
    `;
};

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
ScheduleManager.setupEventListeners = function() {
    this.setupScheduleInteractions();
    this.setupAutoUpdate();
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
 */
ScheduleManager.setupScheduleInteractions = function() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.attachScheduleEventHandlers = function() {
    const scheduleItems = document.querySelectorAll('.schedule-item');
    
    scheduleItems.forEach(item => {
        // –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        item.addEventListener('click', () => {
            this.handleScheduleItemClick(item);
        });
        
        // –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
        item.addEventListener('mouseenter', () => {
            this.handleScheduleItemHover(item, true);
        });
        
        item.addEventListener('mouseleave', () => {
            this.handleScheduleItemHover(item, false);
        });
    });
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.handleScheduleItemClick = function(item) {
    const dayIndex = parseInt(item.getAttribute('data-day-index'));
    const dayData = this.state.schedule[dayIndex];
    
    if (!dayData) return;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞
    item.classList.add('click-feedback');
    setTimeout(() => {
        item.classList.remove('click-feedback');
    }, 300);
    
    // –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–º–µ
    this.showStreamDetails(dayData);
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.handleScheduleItemHover = function(item, isHovering) {
    if (isHovering) {
        item.classList.add('hover-effect');
    } else {
        item.classList.remove('hover-effect');
    }
};

/**
 * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∏–º–µ
 */
ScheduleManager.showStreamDetails = function(dayData) {
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
    console.log('üì∫ –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∏–º–∞:', dayData);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showStreamNotification(dayData);
};

/**
 * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ
 */
ScheduleManager.showStreamNotification = function(dayData) {
    const notification = document.createElement('div');
    notification.className = 'stream-notification';
    notification.innerHTML = `
        <div class="notification-content">
            <h4>${dayData.game}</h4>
            <p>${dayData.day} ${dayData.time}</p>
            <p>${dayData.description || ''}</p>
        </div>
    `;
    
    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: var(--neon-green);
        color: var(--dark-bg);
        padding: 15px;
        border-radius: 8px;
        z-index: 1000;
        max-width: 300px;
        animation: slideInUp 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        notification.remove();
    }, 3000);
};

// ==================== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ====================

/**
 * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
ScheduleManager.startAutoUpdate = function() {
    setInterval(() => {
        this.checkForUpdates();
    }, this.config.updateInterval);
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
ScheduleManager.checkForUpdates = function() {
    if (document.visibilityState !== 'visible') return;
    
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
    this.loadSchedule();
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
ScheduleManager.setupAutoUpdate = function() {
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.checkForUpdates();
        }
    });
};

// ==================== –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ====================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.getSchedule = function() {
    return [...this.state.schedule];
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
 */
ScheduleManager.getDaySchedule = function(dayName) {
    return this.state.schedule.find(day => 
        day.day.toLowerCase() === dayName.toLowerCase()
    );
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—Ä–∏–º–∞
 */
ScheduleManager.getCurrentStream = function() {
    if (this.state.currentDayIndex === -1) return null;
    
    const currentDay = this.state.schedule[this.state.currentDayIndex];
    if (!currentDay) return null;
    
    return this.isStreamLive(currentDay) ? currentDay : null;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç—Ä–∏–º–∞
 */
ScheduleManager.getNextStream = function() {
    const now = new Date();
    const currentDayIndex = now.getDay(); // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Ç.–¥.
    
    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç—Ä–∏–º –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    for (let i = 0; i < this.state.schedule.length; i++) {
        const day = this.state.schedule[i];
        const dayIndex = this.config.daysOrder.indexOf(day.day);
        
        if (dayIndex >= currentDayIndex) {
            return day;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    return this.state.schedule[0] || null;
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
ScheduleManager.updateConfig = function(newConfig) {
    this.config = { ...this.config, ...newConfig };
};

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
ScheduleManager.refresh = function() {
    this.loadSchedule();
};

// ==================== –£–¢–ò–õ–ò–¢–´ ====================

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
 */
ScheduleManager.formatTime = function(minutes) {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç—Ä–∏–º–∞
 */
ScheduleManager.getTimeUntilNextStream = function() {
    const nextStream = this.getNextStream();
    if (!nextStream) return null;
    
    const streamTime = this.parseStreamTime(nextStream.time);
    if (!streamTime) return null;
    
    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    
    // –ï—Å–ª–∏ —Å—Ç—Ä–∏–º —Å–µ–≥–æ–¥–Ω—è –∏ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è
    if (this.isCurrentDay(nextStream.day) && currentTime < streamTime.start) {
        return streamTime.start - currentTime;
    }
    
    // –ï—Å–ª–∏ —Å—Ç—Ä–∏–º –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å, –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è —Å—Ç—Ä–∏–º–∞
    const daysUntilStream = this.getDaysUntil(nextStream.day);
    return (daysUntilStream * 24 * 60) + streamTime.start - currentTime;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
 */
ScheduleManager.getDaysUntil = function(dayName) {
    const targetDayIndex = this.config.daysOrder.indexOf(dayName);
    const currentDayIndex = new Date().getDay();
    
    if (targetDayIndex === -1) return 0;
    
    let daysUntil = targetDayIndex - currentDayIndex;
    if (daysUntil <= 0) {
        daysUntil += 7;
    }
    
    return daysUntil;
};

// ==================== –≠–ö–°–ü–û–†–¢ ====================

// –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥—É–ª—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ScheduleManager;
} else {
    // –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    window.ScheduleManager = ScheduleManager;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => ScheduleManager.init());
} else {
    ScheduleManager.init();
}

console.log('üìÖ ScheduleManager –∑–∞–≥—Ä—É–∂–µ–Ω');
