// ==================== –û–°–ù–û–í–ù–û–ô –§–ê–ô–õ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ====================
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ES6 imports)
// import * as Constants from './utils/constants.js';
// import * as Helpers from './utils/helpers.js';
// import * as Loader from './core/loader.js';
// import * as UI from './core/ui.js';
// import * as Modal from './core/modal.js';
// import * as Schedule from './core/schedule.js';
// import * as GamesManager from './components/games-manager.js';
// import * as OrbitalSystem from './components/orbital-system.js';
// import * as Stats from './components/stats.js';

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================
const App = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    state: {
        currentTab: 'games',
        isMenuOpen: false,
        isGamesExpanded: false,
        loadedData: {
            games: false,
            movies: false,
            schedule: false,
            stats: false
        },
        currentFilters: {
            games: {
                genres: ['all'],
                status: ['status-all']
            },
            movies: {
                genres: ['all'],
                status: ['status-all']
            }
        },
        currentSort: 'name'
    },

    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    elements: {},

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
    modules: {}
};

// ==================== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ====================
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Ksusha Sher...');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        initializeApp();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        loadInitialData();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        startPeriodicTasks();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        showErrorNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
});

// ==================== –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ====================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function initializeApp() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    initializeDOMElements();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    initializeModules();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupNavigation();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    setupResponsiveBehavior();
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
function initializeDOMElements() {
    App.elements = {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        mobileMenu: document.getElementById('mobile-menu'),
        navMenu: document.getElementById('nav-menu'),
        
        // –ì–µ—Ä–æ–π —Å–µ–∫—Ü–∏—è
        orbitalSystem: document.getElementById('orbital-system'),
        heroImage: document.getElementById('hero-image-click'),
        
        // –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        statsSection: document.getElementById('stats'),
        statNumbers: document.querySelectorAll('.stat-number'),
        
        // –°–µ–∫—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        scheduleList: document.getElementById('schedule-list'),
        
        // –°–µ–∫—Ü–∏—è –∏–≥—Ä/—Ñ–∏–ª—å–º–æ–≤
        gamesSection: document.getElementById('games'),
        gamesTabs: document.querySelectorAll('.games-tab'),
        moviesTabs: document.querySelectorAll('.movies-tab'),
        sortTabs: document.querySelectorAll('.sort-tab'),
        filterToggle: document.getElementById('filter-toggle'),
        filterDropdown: document.getElementById('filter-dropdown'),
        gamesContent: document.getElementById('games-content'),
        moviesContent: document.getElementById('movies-content'),
        gamesGrid: document.querySelector('#games-content .games-grid'),
        moviesGrid: document.querySelector('#movies-content .games-grid'),
        toggleGamesBtn: document.getElementById('toggle-games'),
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        gameModal: document.getElementById('gameModal'),
        historyModal: document.getElementById('historyModal'),
        closeModalButtons: document.querySelectorAll('.close-modal, .close-history-modal'),
        
        // –ü—Ä–æ—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        cardNumber: document.getElementById('card-number'),
        copyTooltip: document.getElementById('copy-tooltip')
    };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    validateCriticalElements();
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
function validateCriticalElements() {
    const criticalElements = [
        'mobileMenu', 'navMenu', 'gamesSection', 
        'gamesContent', 'moviesContent', 'gameModal'
    ];
    
    criticalElements.forEach(elementName => {
        if (!App.elements[elementName]) {
            console.warn(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç: ${elementName}`);
        }
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function initializeModules() {
    // –ó–¥–µ—Å—å –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
    App.modules = {
        // loader: Loader,
        // ui: UI,
        // modal: Modal,
        // schedule: Schedule,
        // gamesManager: GamesManager,
        // orbitalSystem: OrbitalSystem,
        // stats: Stats
    };
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    initializeFallbackModules();
}

/**
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∏)
 */
function initializeFallbackModules() {
    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ
    App.modules.loader = {
        loadGames: () => console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä...'),
        loadMovies: () => console.log('üé¨ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å–º–æ–≤...'),
        loadSchedule: () => console.log('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...'),
        loadStats: () => console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
    };
    
    App.modules.ui = {
        setupMobileMenu: setupMobileMenu,
        setupSmoothScroll: setupSmoothScroll,
        setupHeaderScroll: setupHeaderScroll
    };
}

// ==================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
function loadInitialData() {
    console.log('üì• –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    loadDataWithFallback()
        .then(() => {
            console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            App.state.loadedData = {
                games: true,
                movies: true,
                schedule: true,
                stats: true
            };
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            showErrorNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        });
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
 */
async function loadDataWithFallback() {
    try {
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        await Promise.all([
            loadGamesData(),
            loadMoviesData(),
            loadScheduleData(),
            loadStatsData()
        ]);
    } catch (error) {
        console.warn('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç
        await loadFallbackData();
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
 */
async function loadGamesData() {
    try {
        const response = await fetch('data/games.json?' + new Date().getTime());
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä');
        
        const games = await response.json();
        renderGamesGrid(games);
        App.state.loadedData.games = true;
        
        console.log(`üéÆ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–≥—Ä: ${games.length}`);
    } catch (error) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—ã');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
 */
async function loadMoviesData() {
    try {
        const response = await fetch('data/movies.json?' + new Date().getTime());
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤');
        
        const movies = await response.json();
        renderMoviesGrid(movies);
        App.state.loadedData.movies = true;
        
        console.log(`üé¨ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: ${movies.length}`);
    } catch (error) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å–º—ã');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
async function loadScheduleData() {
    try {
        const response = await fetch('data/schedule.json?' + new Date().getTime());
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        
        const scheduleData = await response.json();
        renderSchedule(scheduleData.schedule || []);
        App.state.loadedData.schedule = true;
        
        console.log(`üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–Ω–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${scheduleData.schedule?.length || 0}`);
    } catch (error) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
async function loadStatsData() {
    try {
        const response = await fetch('data/stats.json?' + new Date().getTime());
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        
        const stats = await response.json();
        updateStatsDisplay(stats);
        App.state.loadedData.stats = true;
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    } catch (error) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function loadFallbackData() {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const fallbackGames = [
        {
            id: 'fallback-game',
            title: '–î–µ–º–æ –∏–≥—Ä–∞',
            rating: 4.5,
            description: '–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–≥—Ä–∞. –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...',
            image: 'https://cdn2.steamgriddb.com/grid/24be7c4485d63a3d70e038692172adce.png',
            genres: ['adventure'],
            status: 'playing',
            customColor: '#39ff14'
        }
    ];
    
    const fallbackSchedule = [
        {
            day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            time: '16:00 - 19:00+',
            game: '–ó–∞–≥—Ä—É–∑–∫–∞...',
            description: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è',
            highlighted: false
        }
    ];
    
    const fallbackStats = {
        followers: 5200,
        streams: 150,
        hours: 250,
        years: 3
    };
    
    renderGamesGrid(fallbackGames);
    renderSchedule(fallbackSchedule);
    updateStatsDisplay(fallbackStats);
}

// ==================== –†–ï–ù–î–ï–†–ò–ù–ì –î–ê–ù–ù–´–• ====================

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏ –∏–≥—Ä
 */
function renderGamesGrid(games) {
    if (!App.elements.gamesGrid) return;
    
    if (!games || games.length === 0) {
        App.elements.gamesGrid.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-gamepad"></i>
                <p>–ò–≥—Ä –ø–æ–∫–∞ –Ω–µ—Ç</p>
            </div>
        `;
        return;
    }
    
    App.elements.gamesGrid.innerHTML = games.map(game => `
        <div class="game-card ${game.status}" data-game="${game.id}" style="--custom-hover-color: ${game.customColor || '#39ff14'}">
            <div class="game-image-container">
                <img src="${game.image}" alt="${game.title}" class="game-image" loading="lazy">
            </div>
            <div class="game-info">
                <h3 class="game-title">${game.title}</h3>
                <div class="game-genres">
                    ${(game.genres || []).map(genre => `
                        <span class="game-genre">${genre}</span>
                    `).join('')}
                </div>
                <div class="game-rating">
                    ${generateStars(game.rating)}
                    <span>${game.rating}/5</span>
                </div>
                <p class="game-description">${game.description}</p>
            </div>
        </div>
    `).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–≥—Ä
    attachGameCardListeners();
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏ —Ñ–∏–ª—å–º–æ–≤
 */
function renderMoviesGrid(movies) {
    if (!App.elements.moviesGrid) return;
    
    if (!movies || movies.length === 0) {
        App.elements.moviesGrid.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-film"></i>
                <p>–§–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
            </div>
        `;
        return;
    }
    
    App.elements.moviesGrid.innerHTML = movies.map(movie => `
        <div class="game-card ${movie.status === 'watched' ? 'watched' : 'watching'}" 
             data-movie="${movie.id}" 
             style="--custom-hover-color: ${movie.customColor || '#39ff14'}">
            <div class="game-image-container">
                <img src="${movie.image}" alt="${movie.title}" class="game-image" loading="lazy">
            </div>
            <div class="game-info">
                <h3 class="game-title">${movie.title}</h3>
                <div class="game-genres">
                    ${(movie.genres || []).map(genre => `
                        <span class="game-genre">${genre}</span>
                    `).join('')}
                </div>
                <div class="game-rating">
                    ${generateStars(movie.rating)}
                    <span>${movie.rating}/5</span>
                </div>
                <p class="game-description">${movie.description}</p>
            </div>
        </div>
    `).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∏–ª—å–º–æ–≤
    attachMovieCardListeners();
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
function renderSchedule(schedule) {
    if (!App.elements.scheduleList) return;
    
    if (!schedule || schedule.length === 0) {
        App.elements.scheduleList.innerHTML = `
            <div class="schedule-item">
                <div class="schedule-content">
                    <div class="schedule-game">üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</div>
                    <div class="schedule-desc">–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–∫–æ—Ä–æ</div>
                </div>
            </div>
        `;
        return;
    }
    
    App.elements.scheduleList.innerHTML = schedule.map((item, index) => `
        <div class="schedule-item ${item.highlighted ? 'highlighted' : ''} ${isCurrentDay(index) ? 'current-day' : ''}">
            <div class="schedule-day-wrapper">
                <div class="schedule-day">${item.day}</div>
                <div class="schedule-time">${item.time}</div>
            </div>
            <div class="schedule-content">
                <div class="schedule-game">${item.game}</div>
                <div class="schedule-desc">${item.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
            </div>
            <div class="schedule-status ${isCurrentDay(index) ? 'active' : ''}"></div>
        </div>
    `).join('');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function updateStatsDisplay(stats) {
    if (!App.elements.statNumbers || App.elements.statNumbers.length === 0) return;
    
    const statElements = App.elements.statNumbers;
    if (statElements.length >= 4) {
        animateValue(statElements[0], 0, stats.followers || 5200, 2000);
        animateValue(statElements[1], 0, stats.streams || 150, 2000);
        animateValue(statElements[2], 0, stats.hours || 250, 2000);
        animateValue(statElements[3], 0, stats.years || 3, 2000);
    }
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    setupMobileMenu();
    setupSmoothScroll();
    setupHeaderScroll();
    setupGamesSection();
    setupModalWindows();
    setupCopyFunctionality();
    setupOrbitalSystem();
    setupEasterEggs();
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
 */
function setupMobileMenu() {
    if (!App.elements.mobileMenu || !App.elements.navMenu) return;
    
    App.elements.mobileMenu.addEventListener('click', function(e) {
        e.stopPropagation();
        App.state.isMenuOpen = !App.state.isMenuOpen;
        
        this.classList.toggle('active');
        App.elements.navMenu.classList.toggle('active');
        
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ç–µ–ª–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–µ–Ω—é
        document.body.style.overflow = App.state.isMenuOpen ? 'hidden' : '';
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', function(e) {
        if (App.state.isMenuOpen && 
            !App.elements.navMenu.contains(e.target) && 
            !App.elements.mobileMenu.contains(e.target)) {
            closeMobileMenu();
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
    document.querySelectorAll('#nav-menu a').forEach(link => {
        link.addEventListener('click', closeMobileMenu);
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && App.state.isMenuOpen) {
            closeMobileMenu();
        }
    });
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
 */
function closeMobileMenu() {
    App.state.isMenuOpen = false;
    App.elements.mobileMenu?.classList.remove('active');
    App.elements.navMenu?.classList.remove('active');
    document.body.style.overflow = '';
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
 */
function setupSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;
            
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
                const headerHeight = document.querySelector('header')?.offsetHeight || 80;
                const targetPosition = targetElement.offsetTop - headerHeight;
                
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ö–µ–¥–µ—Ä–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
 */
function setupHeaderScroll() {
    let lastScrollTop = 0;
    const header = document.querySelector('header');
    const headerHeight = header?.offsetHeight || 0;
    
    if (!header) return;
    
    window.addEventListener('scroll', function() {
        if (App.state.isMenuOpen) return;
        
        let scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        
        if (scrollTop > lastScrollTop && scrollTop > headerHeight) {
            document.body.classList.add('scrolled-down');
            document.body.classList.remove('scrolled-up');
        } else {
            document.body.classList.remove('scrolled-down');
            document.body.classList.add('scrolled-up');
        }
        lastScrollTop = scrollTop;
    });
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ü–∏–∏ –∏–≥—Ä –∏ —Ñ–∏–ª—å–º–æ–≤
 */
function setupGamesSection() {
    if (!App.elements.gamesTabs || !App.elements.toggleGamesBtn) return;
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏ –∏ —Ñ–∏–ª—å–º–∞–º–∏
    App.elements.gamesTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            switchGamesTab(this.dataset.tab);
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å
    App.elements.toggleGamesBtn.addEventListener('click', toggleGamesExpansion);
    
    // –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ)
    setupGamesFilters();
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
 */
function setupModalWindows() {
    if (!App.elements.closeModalButtons) return;
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    App.elements.closeModalButtons.forEach(button => {
        button.addEventListener('click', closeAllModals);
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–∫–Ω–∞
    [App.elements.gameModal, App.elements.historyModal].forEach(modal => {
        if (modal) {
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeAllModals();
                }
            });
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeAllModals();
        }
    });
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
 */
function generateStars(rating) {
    let starsHtml = '';
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    
    for (let i = 0; i < fullStars; i++) {
        starsHtml += '<i class="fas fa-star"></i>';
    }
    
    if (hasHalfStar) {
        starsHtml += '<i class="fas fa-star-half-alt"></i>';
    }
    
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    for (let i = 0; i < emptyStars; i++) {
        starsHtml += '<i class="far fa-star"></i>';
    }
    
    return starsHtml;
}

/**
 * –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 */
function animateValue(element, start, end, duration) {
    let startTimestamp = null;
    
    const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        
        element.textContent = Math.floor(progress * (end - start) + start);
        
        if (progress < 1) {
            window.requestAnimationFrame(step);
        }
    };
    
    window.requestAnimationFrame(step);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
function showErrorNotification(message) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.error('üí• –û—à–∏–±–∫–∞:', message);
    
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π toast
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #ff6464;
        color: white;
        padding: 15px 20px;
        border-radius: 5px;
        z-index: 10000;
        max-width: 300px;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ç–µ–∫—É—â–∏–º
 */
function isCurrentDay(index) {
    const today = new Date().getDay();
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è (0) –≤ 6 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω–¥–µ–∫—Å–∞–º
    const adjustedToday = today === 0 ? 6 : today - 1;
    return index === adjustedToday;
}

// ==================== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ====================

function startPeriodicTasks() {
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
        if (document.visibilityState === 'visible') {
            loadInitialData().catch(console.error);
        }
    }, 300000);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            console.log('üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        }
    });
}

// ==================== –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –î–†–£–ì–ò–• –§–ê–ô–õ–ê–• ====================
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ES6 modules

window.App = App;

console.log('üì¶ main.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
